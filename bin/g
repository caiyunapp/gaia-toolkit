#!/usr/bin/env bash

quit () {
    # This should detect bash and zsh, which have a hash command that must
    # be called to get it to forget past commands.  Without forgetting
    # past commands the $PATH changes we made may not be respected
    if [ -n "$BASH" -o -n "$ZSH_VERSION" ] ; then
        hash -r 2>/dev/null
    fi

    if [ -n "$_OLD_PS1" ] ; then
        PS1="$_OLD_PS1"
        export PS1
        unset _OLD_PS1
    fi

    unset GAIA_MODE
    if [ ! "$1" = "nondestructive" ] ; then
    # Self destruct!
        unset -f ops
    fi
}

# unset irrelevant variables
quit nondestructive

CLR_NOR="\x1b[0m"  # back to NORMAL
CLR_BOLD="\x1b[1m" # BOLD text
CLR_RED="\x1b[31m" # RED text
CLR_GRN="\x1b[32m" # GREEN text
CLR_YLW="\x1b[33m" # YELLOW text

set_ps () {
    if [ -z "$GAIA_DISABLE_PROMPT" ] ; then
        if [ "x" != x ] ; then
            PS1="$PS1"
        else
            PS1="\e[0;31m[$GAIA_MODE:$GAIA_ENV]\e[m"
        fi
        export PS1
    fi

    if [ -n "$BASH" -o -n "$ZSH_VERSION" ] ; then
        hash -r 2>/dev/null
    fi
}

os_install () {
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        # We assume debian-like linux is used
        sudo apt-get install $@
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # Mac OSX and we assume brew is installed
        brew install $@
    else
        # Unknown OS
        echo -e "${CLR_RED}Unknown OS!${CLR_NOR}"
        exit -1
    fi
}

mk_ubin () {
    mkdir -p ~/bin
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        # We assume debian-like linux is used
        `echo "export PATH=/home/$USER/bin:\$PATH"` >> ~/.bashrc
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # Mac OSX and we assume brew is installed
        `echo "export PATH=/Users/$USER/bin:\$PATH"` >> ~/.bashrc
    else
        # Unknown OS
        echo -e "${CLR_RED}Unknown OS!${CLR_NOR}"
        exit -1
    fi
    source ~/.bashrc
}

setup () {
    echo -e "${CLR_BOLD}Install OS packages ...${CLR_NOR}"
    os_install git curl redis
    echo -e "${CLR_BOLD}Install OS packages ...${CLR_GRN}Done${CLR_NOR}"

    echo -e "${CLR_BOLD}Install pip ...${CLR_NOR}"
    curl --silent --show-error --retry 5 https://bootstrap.pypa.io/get-pip.py | sudo python2.7
    echo -e "${CLR_BOLD}Install pip ...${CLR_GRN}Done${CLR_NOR}"

    echo -e "${CLR_BOLD}Install python packages ...${CLR_NOR}"
    sudo pip install virtualenv sh pyCLI
    echo -e "${CLR_BOLD}Install python packages ...${CLR_GRN}Done${CLR_NOR}"

    echo -e "${CLR_BOLD}Setup gaia ...${CLR_NOR}"
    mkdir -p ~/.gaia
    rm -rf ~/.gaia/*
    cd ~/.gaia
    git clone git@github.com:caiyunapp/gaia-toolkit.git

    mk_ubin
    cd ~/bin
    ln -s ~/.gaia/gaia-toolkit/bin/g .
    ln -s ~/.gaia/gaia-toolkit/bin/d .
    ln -s ~/.gaia/gaia-toolkit/bin/o .
    echo -e "${CLR_BOLD}Setup gaia ...${CLR_GRN}Done${CLR_NOR}"
}

gaia_home () {
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        # We assume debian-like linux is used
        export GAIA_HOME=`echo "/home/$USER/.gaia"`
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # Mac OSX and we assume brew is installed
        export GAIA_HOME=`echo "/Users/$USER/.gaia"`
    else
        # Unknown OS
        export GAIA_HOME=`echo "/home/$USER/.gaia"`
    fi
}

path_vars () {
    ORG=`pwd`
    CUR="${BASH_SOURCE[0]}";
    if([ -h "${CUR}" ]) then
      while([ -h "${CUR}" ]) do CUR=`readlink "${CUR}"`; done
    fi
    pushd . > /dev/null
    cd `dirname ${CUR}` > /dev/null
    CUR=`pwd`;
    popd  > /dev/null
}

get_template () {
    if [ "$1" == "backend" ] ; then
        REPO=`echo "git@github.com:caiyunapp/gaia-template-backend.git"`
    elif [ "$1" == "crawler" ] ; then
        REPO=`echo "git@github.com:caiyunapp/gaia-template-crawler.git"`
    elif [ "$1" == "ios" ] ; then
        REPO=`echo "git@github.com:caiyunapp/gaia-template-ios.git"`
    elif [ "$1" == "android" ] ; then
        REPO=`echo "git@github.com:caiyunapp/gaia-template-android.git"`
    fi
}

subcall () {
    if [ "$1" == "" ] ; then
      cd .
    else
      array=( $@ )
      len=${#array[@]}
      args=${array[@]:1:$len}
      cmd="${CUR}/../scripts/$1.py"

      cd ${CUR}/../
      $cmd --cwd $ORG $args
      cd ${ORG}
    fi
}

hello () {
    export PRJ_HOME=`pwd`
    if [ -z "$PRJ_ENV" ]; then export PRJ_ENV="dev"; fi

    echo -e "${CLR_YLW}Checking Pyhton version......${CLR_NOR}"
    PYV=`python -c "import sys;t='{v[0]}_{v[1]}'.format(v=list(sys.version_info[:2]));sys.stdout.write(t)";`
    if [[ $PYV == 2_7 ]]
    then
            alias PY=python;
            alias PIP=pip;
    fi
    if [[ $PYV == 3* ]]
    then
            alias PY=python2.7;
            alias PIP=pip2.7;
    fi
    if (PY -V); then
            echo -e "${CLR_YLW}Pyhton version checked......${CLR_NOR}${CLR_GRN}OK${CLR_NOR}"
    else
            echo -e "${CLR_YLW}Pyhton version checked......${CLR_NOR}${CLR_RED}Failed${CLR_NOR}"
            exit -1
    fi

    echo -e "${CLR_YLW}Setting Pyhton path to user local......${CLR_NOR}${CLR_GRN}Done${CLR_NOR}"
    export PYTHONPATH=/usr/local/lib/python2.7/site-packages:$PRJ_HOME/.py/lib/python2.7/site-packages/:$PRJ_HOME/lib/src:$PRJ_HOME/src:$PRJ_HOME/test

    if (PY -c "import virtualenv as venv"); then
            echo -e "${CLR_YLW}Checking virtualenv......${CLR_NOR}${CLR_GRN}OK${CLR_NOR}"
    else
            echo -e "${CLR_YLW}Checking virtualenv......${CLR_NOR}${CLR_RED}Failed${CLR_NOR}"
            echo -e "${CLR_YLW}Reinstalling virtualenv......${CLR_NOR}"
            PIP uninstall virtualenv
            PIP install virtualenv
            echo -e "${CLR_YLW}Reinstalling virtualenv......${CLR_NOR}${CLR_GRN}Done${CLR_NOR}"
    fi

    if (PY $GAIA_HOME/gaia-toolkit/bin/v); then

            source .py/bin/activate

            echo -e "${CLR_YLW}Installing dependencies......${CLR_NOR}"
            PIP install -r requirements/${PRJ_ENV}.txt
            echo -e "${CLR_YLW}Installing dependencies......${CLR_NOR}${CLR_GRN}OK${CLR_NOR}"
            if [[ $PRJ_ENV ]]
            then
                    echo -e "${CLR_YLW}Current environment: ${CLR_NOR}${CLR_RED}$PRJ_ENV${CLR_NOR}"
            else
                    export PRJ_ENV="dev"
                    echo -e "${CLR_YLW}Current environment: ${CLR_NOR}${CLR_RED}$PRJ_ENV${CLR_NOR}"
            fi

            export PATH="$PATH:${PRJ_HOME}/bin/"
    fi
}

command -v d >/dev/null 2>&1 || setup

gaia_home
path_vars

if [ "$1" == "update" ] ; then
    echo -e "${CLR_BOLD}Update gaia ...${CLR_NOR}"
    cd $GAIA_HOME/gaia-toolkit/; git pull;
    cd $ORG
    echo -e "${CLR_BOLD}Update gaia ...${CLR_GRN}Done${CLR_NOR}"
elif [ "$1" == "create" ] ; then
    echo -e "${CLR_BOLD}Create project: ${CLR_YLW} $3 ${CLR_BOLD} ...${CLR_NOR}"
    get_template $2
    echo -e "${CLR_BOLD}Use repo = $REPO${CLR_NOR}"
    git clone $REPO $3
    rm -rf $3/.git
    echo -e "${CLR_BOLD}Create project ...${CLR_GRN}Done${CLR_NOR}"
fi

